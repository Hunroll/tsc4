{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

int tlen(tuple t) asm "TLEN";
forall X -> (tuple, X) tpop(tuple stack) asm "TPOP";
;; (int, int) brembitrefs(builder b) asm "BREMBITREFS";

(cell) procTextPS(cell text, int shift) {
  shift = shift % 26;
  slice s = text.begin_parse();
  ;; ;; ~dump(s);
  ;;~strdump(s);
  ;; ;; ~dump(s);
  s~load_uint(32);
  (int chunk, int refs) = slice_bits_refs(s);
  ;; ~dump(chunk);
  ;; ~dump(refs);
  tuple builders = empty_tuple();
  builder b = begin_cell();
  b~store_uint(0, 32);
  ;; (int rb, int rr) = brembitrefs(b);
  ;; ~dump(rb);

  int exit = 0;
  do {
    while (chunk > 7) {
      int c = s~load_uint(8);
      if ((c > 64) & (c < 91))
      {
        c = (c - 65 + shift) % 26 + 65;
      } 
      else 
      {
        if ((c > 96) & (c < 123)) {
          c = (c - 97 + shift) % 26 + 97;
        }
      }
      ;; ;; ~dump(c);
      
      b~store_uint(c, 8);
      ;; ;; ~dump(prefix | val);
      chunk = chunk - 8;
    }
    ;; ~dump(101);
    builders = cons(b, builders);
    ;; ;; ~dump(102);
    ;; ;; ~dump(b);
    if (refs > 0) {
      if (chunk > 0)
      {
        ~dump(666);
      }
      cell next = s~load_ref();
      s = next.begin_parse();
      b = begin_cell();
      (chunk, refs) = slice_bits_refs(s);
      ;; (rb, rr) = brembitrefs(b);
      ;; ~dump(rb);
    }
    else
    {
      exit = -1;
      ;; ;; ~dump(-1);
    }
  } until (exit == -1);
  (builder tmp, builders) = uncons(builders);
  cell outer = tmp.end_cell();
  int n = tlen(builders);
  ;; ;; ~dump(103);
  ;; ~dump(n);
  
  while (n > 0)
  {
    (tmp, builders) = uncons(builders);
    outer = tmp.store_ref(outer).end_cell();
    n = n - 1;
  }
  ;; ;; ~dump(999);
  ;; ~strdump(outer.begin_parse());
  ;;~strdump(b.end_cell().begin_parse());
  
  return outer;
}

;; (cell) procTextNS(cell text, int shift) {
;;   return text;
;; }

;; (cell) procText(cell text, int shift) {
;;   if (shift >= 0)
;;   {
;;     return procTextPS(cell text, int shift);
;;   }
;;   else
;;   {
;;     return procTextPS(cell text, int shift);
;;   }
;; }

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  return procTextPS(text, shift);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  shift = 26 - (shift % 26);
  return procTextPS(text, shift);
}


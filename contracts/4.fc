{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

(cell) procTextPS(cell text, int shift) {
  slice s = text.begin_parse();
  s~load_uint(32);
  (int chunk, int refs) = slice_bits_refs(s);
  tuple builders = empty_tuple();
  builder b = begin_cell();
  b~store_uint(0, 32);

  int exit = 0;
  int n = 0;
  do {
    chunk = chunk - (chunk % 8);
    while (chunk > 7) {
      int part = min(chunk, 256);

      int bigc = s~load_uint(part);
      int newbigc = 0;

      int winshift = part - 8;
      int win = 255 << (winshift);
      while (winshift >= 0)
      {
        int c = (bigc & win) >> winshift;
        c = ((c > 64) & (c < 91)) ? ((c - 65 + shift) % 26 + 65) : (((c > 96) & (c < 123)) ? ((c - 97 + shift) % 26 + 97) : c);
        newbigc |= (c << winshift);
        winshift -= 8;
        win >>= 8;
      }

      b~store_uint(newbigc, part);
      chunk = chunk - part;
    }
    builders = cons(b, builders);

    if (refs > 0) {
      n = n + 1;
      cell next = s~load_ref();
      s = next.begin_parse();
      b = begin_cell();
      (chunk, refs) = slice_bits_refs(s);
    }
    else
    {
      exit = -1;
    }
  } until (exit == -1);
  (builder tmp, builders) = uncons(builders);
  cell outer = tmp.end_cell();
  
  while (n > 0)
  {
    (tmp, builders) = uncons(builders);
    outer = tmp.store_ref(outer).end_cell();
    n = n - 1;
  }
  
  return outer;
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  shift = shift % 26;
  return (shift == 0) ? text : procTextPS(text, shift);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  shift = 25 - ((shift - 1) % 26);
  return procTextPS(text, shift);
}

